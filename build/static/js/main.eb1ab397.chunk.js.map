{"version":3,"sources":["components/Filter.js","services/dataServices.js","components/PersonForm.js","components/Person.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","filterName","setFilterName","value","onChange","Event","target","baseUrl","axios","get","then","response","data","personObject","post","id","delete","changedNumberPerson","put","PersonForm","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setNotification","onSubmit","preventDefault","name","date","Date","toISOString","number","length","index","window","confirm","existingPerson","find","p","dataServices","returnedPerson","setInterval","map","person","catch","error","initalPerons","concat","type","Person","onClick","filter","n","Persons","filteredList","filterNm","toLowerCase","includes","Notification","notification","className","App","useState","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb1ab397.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Filter = ({ filterName, setFilterName }) => {\r\n  const handleFilterChange = (Event) => {\r\n    setFilterName(Event.target.value)\r\n  }\r\n  return (\r\n    <div>\r\n      filter shown with{\" \"}\r\n      <input value={filterName} onChange={handleFilterChange} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter\r\n","import axios from \"axios\"\r\nconst baseUrl = \"api/persons\"\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst create = (personObject) => {\r\n  const request = axios.post(baseUrl, personObject)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request\r\n}\r\n\r\nconst changeNumber = (id, changedNumberPerson) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, changedNumberPerson)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  deletePerson,\r\n  changeNumber,\r\n}\r\n","import React from \"react\"\r\nimport dataServices from \"../services/dataServices\"\r\n\r\nconst PersonForm = ({\r\n  persons,\r\n  setPersons,\r\n  newName,\r\n  setNewName,\r\n  newNumber,\r\n  setNewNumber,\r\n  setNotification,\r\n}) => {\r\n  const addPerson = (Event) => {\r\n    Event.preventDefault()\r\n    const personObject = {\r\n      name: newName,\r\n      date: new Date().toISOString(),\r\n      number: newNumber,\r\n      id: persons.length + 1,\r\n    }\r\n\r\n    //Loops to find if the person already exist in the phonebook\r\n    //If its the last element and the person still doesnt exist add it\r\n    for (let index = 0; index < persons.length; index++) {\r\n      if (persons[index].name === personObject.name) {\r\n        //if there is the person with the same name offer a choise to add new number to the person\r\n        if (\r\n          window.confirm(\r\n            `This contact is already added in the phonebook. Do you want to change the number of the contact?`\r\n          )\r\n        ) {\r\n          const existingPerson = persons.find(\r\n            (p) => p.name === personObject.name\r\n          )\r\n          const changedNumberPerson = {\r\n            ...existingPerson,\r\n            number: personObject.number,\r\n          }\r\n\r\n          dataServices\r\n            .changeNumber(changedNumberPerson.id, changedNumberPerson)\r\n            .then((returnedPerson) => {\r\n              //Show notification about changing the number\r\n              setNotification(\r\n                `The number of ${personObject.name} is changed to ${personObject.number}`\r\n              )\r\n              setInterval(() => {\r\n                setNotification(null)\r\n              }, 5000)\r\n              setPersons(\r\n                persons.map((person) =>\r\n                  person.name !== personObject.name ? person : returnedPerson\r\n                )\r\n              )\r\n            })\r\n            .catch((error) => {\r\n              setNotification(\r\n                \"There has been a change in the list. List is refreshed\"\r\n              )\r\n              setInterval(() => {\r\n                setNotification(null)\r\n              }, 5000)\r\n              dataServices.getAll().then((initalPerons) => {\r\n                setPersons(initalPerons)\r\n              })\r\n            })\r\n        }\r\n      } else if (\r\n        index === persons.length - 1 &&\r\n        persons[index].name !== personObject.name\r\n      ) {\r\n        dataServices\r\n          .create(personObject)\r\n          .then((returnedPerson) => {\r\n            setNotification(\r\n              `Person with the name of ${personObject.name} is added to the phonebook`\r\n            )\r\n            setInterval(() => {\r\n              setNotification(null)\r\n            }, 5000)\r\n            return setPersons(persons.concat(returnedPerson))\r\n          })\r\n          .catch((error) => {\r\n            setNotification(\r\n              \"There has been a change in the list. List is refreshed\"\r\n            )\r\n            setInterval(() => {\r\n              setNotification(null)\r\n            }, 5000)\r\n            dataServices.getAll().then((initalPerons) => {\r\n              setPersons(initalPerons)\r\n            })\r\n          })\r\n      }\r\n    }\r\n  }\r\n  const handlePersonChange = (Event) => {\r\n    setNewName(Event.target.value)\r\n  }\r\n  const handleNumberChange = (Event) => {\r\n    setNewNumber(Event.target.value)\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n      <div>\r\n        name: <input value={newName} onChange={handlePersonChange} />\r\n      </div>\r\n      <div>\r\n        number : <input value={newNumber} onChange={handleNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type='submit'>add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm\r\n","import React from \"react\"\r\nimport dataServices from \"../services/dataServices\"\r\n\r\nconst Person = ({ person, persons, setPersons, setNotification }) => {\r\n  //Deletes the person an a click of a button\r\n  //Filters the list so the person is removed without reloading\r\n  //Every button uses the id of a person\r\n  //Asks the user to confirm deletion\r\n  const toggleDeletion = (id) => {\r\n    if (\r\n      window.confirm(\r\n        `Do you really want to delete this person from the phonebook?`\r\n      )\r\n    ) {\r\n      dataServices\r\n        .deletePerson(id)\r\n        .then(() => {\r\n          setPersons(persons.filter((n) => n.id !== id))\r\n          setNotification(\"The person was deleted from the phonebook\")\r\n          setInterval(() => {\r\n            setNotification(null)\r\n          }, 5000)\r\n        })\r\n        .catch((error) => {\r\n          setNotification(\r\n            \"There has been a change in the list. List is refreshed\"\r\n          )\r\n          setInterval(() => {\r\n            setNotification(null)\r\n          }, 5000)\r\n          dataServices.getAll().then((initalPerons) => {\r\n            setPersons(initalPerons)\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      {person.name} {person.number}\r\n      <button onClick={() => toggleDeletion(person.id)}>delete</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Person\r\n","import Person from \"./Person\"\r\n\r\nconst Persons = ({ persons, filterName, setPersons, setNotification }) => {\r\n  const filteredList = persons.filter((filterNm) => {\r\n    return filterNm.name.toLowerCase().includes(filterName.toLowerCase())\r\n  })\r\n\r\n  return (\r\n    <ul>\r\n      {filteredList.map((person) => (\r\n        <Person\r\n          key={person.id}\r\n          person={person}\r\n          persons={persons}\r\n          setPersons={setPersons}\r\n          filteredList={filteredList}\r\n          setNotification={setNotification}\r\n        />\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Persons\r\n","import React from \"react\"\r\n\r\nconst Notification = ({ notification }) => {\r\n  if (notification === null) {\r\n    return null\r\n  }\r\n  return <div className='notification'>{notification}</div>\r\n}\r\n\r\nexport default Notification\r\n","import React, { useState, useEffect } from \"react\"\nimport Filter from \"./components/Filter\"\nimport PersonForm from \"./components/PersonForm\"\nimport Persons from \"./components/Persons\"\nimport dataServices from \"./services/dataServices\"\nimport Notification from \"./components/Notification\"\n\nconst App = () => {\n  //Initialize content saved in array Persons\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState(\"Person name\")\n  const [newNumber, setNewNumber] = useState(\"Number\")\n  const [filterName, setFilterName] = useState(\"name\")\n  const [notification, setNotification] = useState(null)\n\n  //Gets all the data from the database\n  useEffect(() => {\n    dataServices.getAll().then((initalPerons) => {\n      setPersons(initalPerons)\n    })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter filterName={filterName} setFilterName={setFilterName} />\n      <h3>Add a new person to the phonebook</h3>\n      <PersonForm\n        persons={persons}\n        setPersons={setPersons}\n        newName={newName}\n        setNewName={setNewName}\n        newNumber={newNumber}\n        setNewNumber={setNewNumber}\n        setNotification={setNotification}\n      />\n\n      <h3>Numbers</h3>\n      <Persons\n        persons={persons}\n        filterName={filterName}\n        setPersons={setPersons}\n        setNotification={setNotification}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}